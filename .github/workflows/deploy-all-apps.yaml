# Standalone workflow that re-applies the k8s configuration for all apps in
# the monorepo.
#
# This workflow is purely designed to be called manually by a real person.

name: Deploy All Apps

on:
  # Allows you to run this workflow manually from the Actions tab.
  workflow_dispatch:

concurrency: deploy-all-apps_${{ github.ref }}

jobs:
  # Find all apps with k8s deployment strategy.
  find-apps:
    name: Find Apps
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # Checkout the repository code.
      - name: Checkout Repo
        uses: actions/checkout@v4

      # Set the matrix of apps to deploy.
      - name: Set matrix
        id: set-matrix
        run: |
          # Get list of all apps
          ALL_APPS=$(find apps -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | sort)
          
          # Filter for apps that have k8s deployment strategy
          APPS_TO_DEPLOY=""
          for app in $ALL_APPS; do
            PACKAGE_JSON_PATH="apps/$app/package.json"
            
            # Skip if package.json doesn't exist
            if [ ! -f "$PACKAGE_JSON_PATH" ]; then
              echo "No package.json found for $app, skipping"
              continue
            fi
            
            # Check if the app uses k8s deployment strategy
            RELEASE_STRATEGY=$(node -p "require('./$PACKAGE_JSON_PATH').release?.strategy || 'none'")
            
            if [ "$RELEASE_STRATEGY" == "k8s" ]; then
              # Get the k8s config directory path to verify it exists
              CONFIG_DIR=$(node -p "require('./$PACKAGE_JSON_PATH').release?.k8s?.configDirPath || './k8s'")
              # Remove leading ./ if present
              CONFIG_DIR=$(echo "$CONFIG_DIR" | sed 's#^\./##')
              
              # Check if the k8s config directory exists
              if [ -d "apps/$app/$CONFIG_DIR" ]; then
                echo "Found k8s app: $app (config dir: $CONFIG_DIR)"
                APPS_TO_DEPLOY="$APPS_TO_DEPLOY $app"
              else
                echo "App $app has k8s strategy but no config directory at apps/$app/$CONFIG_DIR"
              fi
            else
              echo "App $app has release strategy: $RELEASE_STRATEGY, skipping"
            fi
          done
          
          # Create JSON array of apps
          if [ -z "$APPS_TO_DEPLOY" ]; then
            APPS_JSON="[]"
          else
            APPS_JSON=$(echo "$APPS_TO_DEPLOY" | tr ' ' '\n' | grep -v '^$' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
          
          # Create the final matrix object
          MATRIX_JSON=$(echo "{\"app\": $APPS_JSON}")
          
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Matrix: $MATRIX_JSON"

  # Deploy each app using the reusable workflow.
  deploy-apps:
    name: Deploy Apps
    needs: find-apps
    # Only run this job if there are apps to deploy.
    if: ${{ fromJson(needs.find-apps.outputs.matrix).app[0] != null }}
    strategy:
      matrix: ${{ fromJson(needs.find-apps.outputs.matrix) }}
      fail-fast: false
    uses: ./.github/workflows/deploy-app.yaml
    secrets: inherit # Necessary for accessing the KUBECONFIG etc.
    with:
      app_name: ${{ matrix.app }}