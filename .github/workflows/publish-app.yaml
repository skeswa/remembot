# Reusable workflow that builds and pushes a specific app to the container
# registry and then subsequently updates the k8s deployment configuration.
#
# This workflow is designed to be called by the `release-and-publish.yaml`
# workflow.

name: Publish App

on:
  # Allows you to call this workflow from another one.
  workflow_call:
    inputs:
      app_name:
        description: "Name of the directory within apps/ to deploy."
        required: true
        type: string
    secrets: []

concurrency: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.app_name }}

jobs:
  publish-app:
    name: Publish App
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      # First, we checkout the repository with full history to ensure git
      # operations work correctly.
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # Fetch all history. This is crucial for git pull --rebase to work
          # reliably.
          fetch-depth: 0

      # Set up Docker Buildx to enable multi-architecture builds
      # (both amd64 and arm64 so that we can run on Macs).
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:master
            network=host

      # Authenticate with GitHub Container Registry to enable pushing images.
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract the version number from the app's package.json file.
      - name: Extract package version
        id: package-version
        run: |
          VERSION=$(node -p "require('./apps/${{ inputs.app_name }}/package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION from apps/${{ inputs.app_name }}/package.json"

      # Generate Docker image metadata including tags for different versions.
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ needs.pre-publish.outputs.project_name }}-${{ inputs.app_name }}
          tags: |
            type=sha,format=short
            type=raw,value=latest
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}
            type=raw,value=${{ steps.package-version.outputs.version }}

      # Build and push the Docker image to the container registry.
      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ inputs.app_name }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          platforms: linux/amd64,linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Update the Kubernetes deployment manifest with the new image version.
      - name: Update image tag in k8s manifest and commit changes
        run: |
          # Set the base image name directly from the known pattern.
          BASE_IMAGE="ghcr.io/${{ github.repository_owner }}/${{ needs.pre-publish.outputs.project_name }}-${{ inputs.app_name }}"
          VERSION="${{ steps.package-version.outputs.version }}"

          # Create a temporary file for the new content.
          TMP_FILE=$(mktemp)

          # Process the deployment file line by line.
          while IFS= read -r line; do
            if [[ $line =~ ^[[:space:]]*image:[[:space:]]* ]]; then
              # Preserve the original indentation.
              INDENT=$(echo "$line" | sed -E 's/^([[:space:]]*).*/\1/')
              echo "${INDENT}image: ${BASE_IMAGE}:${VERSION}" >> "$TMP_FILE"
            else
              echo "$line" >> "$TMP_FILE"
            fi
          done < "apps/${{ inputs.app_name }}/k8s/deployment.yaml"

          # Replace the original file with the new content.
          mv "$TMP_FILE" "apps/${{ inputs.app_name }}/k8s/deployment.yaml"

          # Configure git and commit the changes.
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add apps/${{ inputs.app_name }}/k8s/deployment.yaml
          git commit -m "chore: update ${{ inputs.app_name }} image to version ${{ steps.package-version.outputs.version }}" || echo "No changes to commit"

          echo "Updated ${{ inputs.app_name }} k8s deployment to use image: ${BASE_IMAGE}:${VERSION}"

      # Push the updated Kubernetes manifest back to the repository.
      # This step includes retry logic to handle concurrent updates.
      - name: Push k8s changes
        id: push-k8s
        run: |
          # Get the current branch name (e.g., main, develop).
          BRANCH_NAME="${{ github.ref_name }}"

          echo "Attempting to pull with rebase from origin/${BRANCH_NAME}..."
          # Pull latest changes from remote and rebase local commits on top.
          # Loop to retry a few times in case of very fast concurrent updates.
          for i in 1 2 3; do
            echo "Pull/Push attempt $i for branch ${BRANCH_NAME}"
            if git pull --rebase origin "${BRANCH_NAME}" && git push origin "${BRANCH_NAME}"; then
              echo "Push successful on attempt $i."
              exit 0
            fi

            # Randomize the sleep duration between 5 and 10 seconds.
            SLEEP_DURATION=$(($RANDOM % 5 + 5))
            echo "Pull/Push attempt $i failed. Retrying in $SLEEP_DURATION seconds..."
            sleep $SLEEP_DURATION
          done
          echo "Failed to push changes after multiple retries."
          exit 1

      # Finally, trigger the deployment workflow to apply the changes to the
      # k8s cluster.
      - name: Deploy changed app
        uses: ./.github/workflows/deploy_app.yaml
        with:
          app_name: ${{ inputs.app_name }}
