# Reusable workflow that re-applies the k8s configuration for a specific app in
# the monorepo.
#
# This workflow is designed to be called by the `deploy-all-apps.yaml` and
# `release.yaml` workflows.

name: Deploy App

on:
  # Allows you to call this workflow from another one.
  workflow_call:
    inputs:
      app_name:
        description: "Name of the directory within apps/ to deploy."
        required: true
        type: string

concurrency: deploy-app_${{ github.ref }}_${{ inputs.app_name }}

jobs:
  pre-deploy:
    name: Pre-deploy
    runs-on: ubuntu-latest
    outputs:
      strategy: ${{ steps.check_k8s.outputs.strategy }}
    steps:
      # Checkout the repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Read the "deployment" field from the app's package.json to determine
      # the deployment strategy.
      - name: Read deployment strategy
        id: check_k8s
        run: |
          PACKAGE_JSON_PATH="apps/${{ inputs.app_name }}/package.json"
          if [ ! -f "$PACKAGE_JSON_PATH" ]; then
            echo "strategy=none" >> $GITHUB_OUTPUT
            echo "No package.json found for ${{ inputs.app_name }}."
            exit 0
          fi

          DEPLOYMENT_STRATEGY=$(jq -r '.deploy.strategy' "$PACKAGE_JSON_PATH")

          if [ -z "$DEPLOYMENT_STRATEGY" ] || [ "$DEPLOYMENT_STRATEGY" == "null" ]; then
            echo "strategy=none" >> $GITHUB_OUTPUT
            echo "No deployment strategy found for ${{ inputs.app_name }}."
          else
            echo "strategy=$DEPLOYMENT_STRATEGY" >> $GITHUB_OUTPUT
            echo "Deployment strategy for ${{ inputs.app_name }} is '$DEPLOYMENT_STRATEGY'."
          fi

  deploy-k8s:
    name: Deploy to k8s
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.strategy == 'k8s'
    steps:
      # Checkout the repository code.
      - name: Checkout repository
        uses: actions/checkout@v4

      # Read the path to the app's k8s configuration directory from its
      # package.json.
      - name: Read k8s config directory path
        id: k8s-config
        run: |
          PACKAGE_JSON_PATH="apps/${{ inputs.app_name }}/package.json"
          # Default to "k8s" if not specified for backward compatibility.
          CONFIG_DIR_PATH=$(jq -r '.deploy.k8s.configDirPath // "k8s"' "$PACKAGE_JSON_PATH")

          # Path might start with "./", remove it for cleaner paths.
          CLEAN_CONFIG_DIR_PATH=$(echo "$CONFIG_DIR_PATH" | sed 's#^\./##')
          APP_K8S_PATH="apps/${{ inputs.app_name }}/${CLEAN_CONFIG_DIR_PATH}"
          echo "path=$APP_K8S_PATH" >> $GITHUB_OUTPUT
          echo "Using k8s config from: $APP_K8S_PATH"

      # Install kubectl for Kubernetes cluster interaction.
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      # Read the deployment target from the app's k8s configuration.
      # This determines which environment (e.g., DEV, PROD) to deploy to.
      - name: Read kubeconfig secret name
        id: target
        run: |
          SECRET_NAME=$(yq -r '.spec.kubeconfig.secret.name' ${{ steps.k8s-config.outputs.path }}/target.yaml)
          echo "secret_name=$SECRET_NAME" >> $GITHUB_OUTPUT
          echo "Using kubeconfig secret: $SECRET_NAME"

      # Verify that the required kubeconfig secret exists for the target
      # environment. This secret contains the Kubernetes cluster credentials.
      - name: Validate kubeconfig secret exists
        id: validate-kubeconfig-secret
        run: |
          SECRET_NAME="${{ steps.target.outputs.secret_name }}"
          KUBECONFIG="${{ secrets[steps.target.outputs.secret_name] }}"
          if [ -z "$KUBECONFIG" ]; then
            echo "::error::Required secret '$SECRET_NAME' is not set. Please add this secret to the repository."
            exit 1
          fi
          echo "kubeconfig<<EOF" >> $GITHUB_OUTPUT
          echo "$KUBECONFIG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # Configure kubectl with the cluster credentials.
      - name: Setup k8s configuration
        run: |
          mkdir -p $HOME/.kube
          echo "${{ steps.validate-kubeconfig-secret.outputs.kubeconfig }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      # Apply Kubernetes manifests in a specific order to ensure proper
      # deployment. The order is important for dependencies between resources.
      - name: Applying ${{ inputs.app_name }} k8s configuration
        run: |
          echo "Applying ${{ inputs.app_name }} k8s configuration..."
          APP_K8S_PATH="${{ steps.k8s-config.outputs.path }}"

          # Define the specific order of files to ensure proper resource creation.
          # Namespace must be created first, followed by core resources, then networking.
          ORDERED_FILES=(
            "namespace.yaml"      # Create namespace first.
            "deployment.yaml"     # Deploy the application.
            "service.yaml"        # Create service for internal access.
            "certificate.yaml"    # Set up TLS certificates.
            "ingress.yaml"        # Configure external access.
          )

          # Apply files in the specified order to handle dependencies correctly.
          for FILE_NAME in "${ORDERED_FILES[@]}"; do
            FILE_PATH="$APP_K8S_PATH/$FILE_NAME"
            if [ -f "$FILE_PATH" ]; then
              echo "Applying (ordered) $FILE_PATH..."
              kubectl apply -f "$FILE_PATH"
            fi
          done

          # Apply any remaining Kubernetes manifests that weren't in the ordered list.
          # This handles additional resources like ConfigMaps, Secrets, etc.
          echo "Applying remaining YAML files..."
          for file in $(find "$APP_K8S_PATH" -type f -name "*.yaml" ! -name "target.yaml"); do
            # Check if the file is one of the ordered files (already applied or handled).
            IS_ORDERED_FILE=false
            for ORDERED_FILE_NAME in "${ORDERED_FILES[@]}"; do
              if [ "$(basename "$file")" == "$ORDERED_FILE_NAME" ]; then
                IS_ORDERED_FILE=true
                break
              fi
            done

            if [ "$IS_ORDERED_FILE" == "false" ]; then
              echo "Applying (remaining) $file..."
              kubectl apply -f "$file"
            fi
          done

          echo "${{ inputs.app_name }} deployed successfully."
