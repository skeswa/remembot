name: Deploy

on:
  # Trigger the workflow on push or pull request events that affect k8s
  # manifests
  push:
    branches:
      - main
    paths:
      - "apps/*/k8s/**"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # Prepare to deploy apps from the monorepo:
  # - Find all apps with changes ink8s directories
  pre-deploy:
    name: Pre-deploy
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4

      - name: Set matrix
        id: set-matrix
        run: |
          # Get list of all apps
          APPS=$(find apps -maxdepth 2 -type d -name k8s | sed 's|apps/||g' | sed 's|/k8s||g')

          # Create a matrix object with all apps
          MATRIX_JSON=$(echo '{"app": '"$(echo "$APPS" | jq -R -s -c 'split("\n") | map(select(length > 0))')"'}')

          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Matrix: $MATRIX_JSON"

  # Deploy apps from the monorepo:
  # - Set up kubectl
  # - Read the deployment target
  # - Apply all Kubernetes manifests (except target.yaml) for this app
  deploy:
    name: Deploy
    needs: pre-deploy
    # Only run this job if there are apps to deploy
    if: ${{ fromJson(needs.pre-deploy.outputs.matrix).app[0] != null }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.pre-deploy.outputs.matrix) }}
      fail-fast: false
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: "latest"

      - name: Read deployment target
        id: target
        run: |
          TARGET=$(cat apps/${{ matrix.app }}/k8s/target.yaml | tr -d '[:space:]' | tr '[:lower:]' '[:upper:]')
          echo "target=$TARGET" >> $GITHUB_OUTPUT
          echo "Using deployment target: $TARGET"

      - name: Validate kubeconfig secret exists
        id: validate-kubeconfig-secret
        run: |
          SECRET_NAME="${{ steps.target.outputs.target }}_KUBECONFIG"
          KUBECONFIG="${{ secrets[format('{0}_KUBECONFIG', steps.target.outputs.target)] }}"
          if [ -z "$KUBECONFIG" ]; then
            echo "::error::Required secret '$SECRET_NAME' is not set. Please add this secret to the repository."
            exit 1
          fi
          echo "kubeconfig<<EOF" >> $GITHUB_OUTPUT
          echo "$KUBECONFIG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Setup k8s configuration
        run: |
          mkdir -p $HOME/.kube
          echo "${{ steps.validate-kubeconfig-secret.outputs.kubeconfig }}" > $HOME/.kube/config
          chmod 600 $HOME/.kube/config

      - name: Applying ${{ matrix.app }} k8s configuration
        run: |
          echo "Applying ${{ matrix.app }} k8s configuration..."
          APP_K8S_PATH="apps/${{ matrix.app }}/k8s"

          # Define the specific order of files
          ORDERED_FILES=(
            "namespace.yaml"
            "deployment.yaml"
            "service.yaml"
            "certificate.yaml"
            "ingress.yaml"
          )

          # Apply files in the specified order
          for FILE_NAME in "${ORDERED_FILES[@]}"; do
            FILE_PATH="$APP_K8S_PATH/$FILE_NAME"
            if [ -f "$FILE_PATH" ]; then
              echo "Applying (ordered) $FILE_PATH..."
              kubectl apply -f "$FILE_PATH"
            fi
          done

          # Apply all other Kubernetes manifests (except target.yaml and already applied files)
          echo "Applying remaining YAML files..."
          for file in $(find "$APP_K8S_PATH" -type f -name "*.yaml" ! -name "target.yaml"); do
            # Check if the file is one of the ordered files (already applied or handled)
            IS_ORDERED_FILE=false
            for ORDERED_FILE_NAME in "${ORDERED_FILES[@]}"; do
              if [ "$(basename "$file")" == "$ORDERED_FILE_NAME" ]; then
                IS_ORDERED_FILE=true
                break
              fi
            done

            if [ "$IS_ORDERED_FILE" == "false" ]; then
              echo "Applying (remaining) $file..."
              kubectl apply -f "$file"
            fi
          done

          echo "${{ matrix.app }} deployed successfully"
