# Standalone workflow that re-applies any app k8s configuration that has
# changed.
#
# This workflow is purely designed to be triggered by pushes to the main branch.

name: Deploy Changed Apps

on:
  # Triggers this workflow when a push is made to the main branch that tweaks
  # YAML or JSON configuration files within apps/.
  push:
    branches:
      - main
    paths:
      - "apps/**/*.yaml"
      - "apps/**/*.yml"
      - "apps/**/*.json"

concurrency: deploy-changed-apps_${{ github.ref }}

jobs:
  # Find all apps that have changed k8s configurations.
  find-changed-apps:
    name: Find Changed Apps
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      # Checkout the repository code.
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can
          # generate changelogs with the correct commits.
          fetch-depth: 0

      # Get list of changed files using tj-actions/changed-files.
      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v46
        with:
          files: |
            apps/**/*.yaml
            apps/**/*.yml
            apps/**/*.json

      # Set app matrix based on changed files, k8s strategy, and version differences.
      - name: Set matrix
        id: set-matrix
        run: |
          # Get list of changed files from the action output.
          CHANGED_FILES="${{ steps.changed-files.outputs.all_changed_files }}"
          
          echo "Changed files:"
          echo "$CHANGED_FILES"
          
          # Find unique apps that have changed
          CHANGED_APPS=$(echo "$CHANGED_FILES" | grep "^apps/[^/]*/" | cut -d/ -f2 | sort -u)
          
          # Filter for apps that have k8s deployment strategy
          APPS_TO_DEPLOY=""
          for app in $CHANGED_APPS; do
            PACKAGE_JSON_PATH="apps/$app/package.json"
            
            # Skip if package.json doesn't exist
            if [ ! -f "$PACKAGE_JSON_PATH" ]; then
              echo "No package.json found for $app, skipping"
              continue
            fi
            
            # Check if the app uses k8s deployment strategy
            RELEASE_STRATEGY=$(node -p "require('./$PACKAGE_JSON_PATH').release?.strategy || 'none'")
            
            if [ "$RELEASE_STRATEGY" == "k8s" ]; then
              # Get the k8s config directory path
              CONFIG_DIR=$(node -p "require('./$PACKAGE_JSON_PATH').release?.k8s?.configDirPath || './k8s'")
              # Remove leading ./ if present
              CONFIG_DIR=$(echo "$CONFIG_DIR" | sed 's#^\./##')
              
              # Check if any of the changed files are in this app's k8s config directory
              APP_K8S_CHANGED=false
              for file in $CHANGED_FILES; do
                if [[ "$file" == "apps/$app/$CONFIG_DIR/"* ]] || [[ "$file" == "apps/$app/package.json" ]]; then
                  APP_K8S_CHANGED=true
                  break
                fi
              done
              
              if [ "$APP_K8S_CHANGED" == "true" ]; then
                # Check if there's a version difference between published and deployed
                PUBLISHED_VERSION=$(node -p "require('./$PACKAGE_JSON_PATH').release?.publish?.version || ''")
                DEPLOYED_VERSION=$(node -p "require('./$PACKAGE_JSON_PATH').release?.deploy?.version || ''")
                
                echo "K8s configuration changed for $app (config dir: $CONFIG_DIR)"
                echo "  Published version: $PUBLISHED_VERSION"
                echo "  Deployed version: $DEPLOYED_VERSION"
                
                if [ "$PUBLISHED_VERSION" != "$DEPLOYED_VERSION" ]; then
                  echo "  Version differs, adding to deploy list"
                  APPS_TO_DEPLOY="$APPS_TO_DEPLOY $app"
                else
                  echo "  Versions match, skipping deployment"
                fi
              fi
            else
              echo "App $app has release strategy: $RELEASE_STRATEGY, skipping"
            fi
          done
          
          # Create JSON array of apps
          if [ -z "$APPS_TO_DEPLOY" ]; then
            APPS_JSON="[]"
          else
            APPS_JSON=$(echo "$APPS_TO_DEPLOY" | tr ' ' '\n' | grep -v '^$' | jq -R -s -c 'split("\n") | map(select(length > 0))')
          fi
          
          # Create the final matrix object
          MATRIX_JSON=$(echo "{\"app\": $APPS_JSON}")
          
          echo "matrix=$MATRIX_JSON" >> $GITHUB_OUTPUT
          echo "Matrix: $MATRIX_JSON"

  # Deploy each changed app using the reusable workflow.
  deploy-apps:
    name: Deploy Apps
    needs: find-changed-apps
    # Only run this job if there are apps to deploy.
    if: ${{ fromJson(needs.find-changed-apps.outputs.matrix).app[0] != null }}
    strategy:
      matrix: ${{ fromJson(needs.find-changed-apps.outputs.matrix) }}
      fail-fast: false
    uses: ./.github/workflows/deploy-app.yaml
    secrets: inherit # Necessary for accessing the KUBECONFIG etc.
    with:
      app_name: ${{ matrix.app }}