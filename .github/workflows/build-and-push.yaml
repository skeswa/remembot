name: Build and Push Images

on:
  push:
    branches:
      - main
    paths:
      - 'apps/**'
      - 'packages/**'
      - '.changeset/**'
      - '**/package.json'
      - '.github/workflows/build-and-push.yaml'

env:
  REGISTRY: ghcr.io
  OWNER: ${{ github.repository_owner }}

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find all apps
        id: find-apps
        run: |
          # Find all directories in the apps directory
          APPS=$(find apps -maxdepth 1 -mindepth 1 -type d -exec basename {} \; | sort)
          echo "Found apps: $APPS"
          echo "apps<<EOF" >> $GITHUB_OUTPUT
          echo "$APPS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Generate dynamic filters
        id: dynamic-filters
        run: |
          # Get all apps from the previous step's output
          APPS="${{ steps.find-apps.outputs.apps }}"
          
          # Initialize an empty string to build the YAML content
          FILTERS_YAML=""
          
          # Loop through each app (assuming APPS is a space-separated string)
          for app in $APPS; do
            # Skip if the app name is empty (e.g., if there were multiple spaces in APPS)
            if [ -z "$app" ]; then
              continue
            fi
            
            # Append the YAML block for the current app to FILTERS_YAML
            # Using printf for precise formatting, including newlines and indentation.
            # YAML syntax:
            # app_name:
            #   - 'apps/app_name/**'
            #   - 'packages/**'
            FILTERS_YAML+=$(printf "%s:\n  - 'apps/%s/**'\n  - 'packages/**'\n" "$app" "$app")
          done
          
          # Output the generated YAML string to GITHUB_OUTPUT using heredoc syntax
          # This makes the 'filters' output available as steps.dynamic-filters.outputs.filters
          echo "filters<<EOF" >> $GITHUB_OUTPUT
          echo "${FILTERS_YAML}" >> $GITHUB_OUTPUT # If FILTERS_YAML is empty, this writes a newline.
                                              # If it has content, it writes the content.
                                              # dorny/paths-filter should handle an empty/newline filter string gracefully.
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Diagnostic log to show what was generated
          echo "Generated YAML filters for GITHUB_OUTPUT:"
          if [ -n "${FILTERS_YAML}" ]; then
            echo "${FILTERS_YAML}"
          else
            echo "[EMPTY_STRING] (No apps found or APPS variable was empty)"
          fi
          echo "--- End of Generated YAML filters ---"

      - name: Detect changes per app
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: ${{ fromJson(steps.dynamic-filters.outputs.filters) }}

      - name: Create app matrix with port mapping
        id: set-matrix
        run: |
          # Get all apps
          APPS="${{ steps.find-apps.outputs.apps }}"
          
          # Get changes
          CHANGES='${{ steps.filter.outputs.changes }}'
          
          # Create an array for the matrix
          MATRIX_APPS="["
          MATRIX_INCLUDE="["
          
          # Default port mapping (can be expanded or moved to a config file)
          declare -A PORT_MAP
          PORT_MAP["api"]="3001"
          PORT_MAP["web"]="3000"
          PORT_MAP["courier"]="3002"
          
          # Add each changed app to the matrix
          for app in $APPS; do
            # Skip empty entries
            [ -z "$app" ] && continue
            
            # Check if this app changed
            IS_CHANGED=$(echo "$CHANGES" | jq -r ".$app // \"false\"")
            if [ "$IS_CHANGED" == "true" ]; then
              # Add to matrix apps array
              MATRIX_APPS+="\"$app\","
              
              # Get port (default to 3000 if not specified)
              PORT="${PORT_MAP[$app]:-3000}"
              
              # Add to include array with port
              MATRIX_INCLUDE+="{\"app\":\"$app\",\"port\":\"$PORT\"},"
            fi
          done
          
          # Remove trailing comma and close arrays
          MATRIX_APPS="${MATRIX_APPS%,}]"
          MATRIX_INCLUDE="${MATRIX_INCLUDE%,}]"
          
          # Create the final matrix JSON
          MATRIX="{\"app\":$MATRIX_APPS,\"include\":$MATRIX_INCLUDE}"
          
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT
          echo "Generated matrix: $MATRIX"

  build-and-push:
    needs: detect-changes
    if: ${{ fromJson(needs.detect-changes.outputs.matrix).app[0] != null }}
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
      fail-fast: false
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.OWNER }}/remembot/${{ matrix.app }}
          tags: |
            type=sha,format=short
            type=raw,value=latest
            type=raw,value={{date 'YYYYMMDD-HHmmss'}}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/${{ matrix.app }}/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Update image tag in k8s manifest
        run: |
          COMMIT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          sed -i "s|\${REGISTRY}/remembot/${{ matrix.app }}:.*|\${REGISTRY}/remembot/${{ matrix.app }}:$COMMIT_SHA|g" apps/${{ matrix.app }}/k8s/deployment.yaml

      - name: Commit and push k8s manifests
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add apps/${{ matrix.app }}/k8s/deployment.yaml
          git commit -m "chore: update ${{ matrix.app }} image to latest commit" || echo "No changes to commit"
          git push 